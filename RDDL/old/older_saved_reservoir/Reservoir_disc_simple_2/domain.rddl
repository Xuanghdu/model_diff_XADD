domain reservoir_control_dis {

	requirements = {
		concurrent,           // different reservoirs are controlled independently
		reward-deterministic, // this domain does not use a stochastic reward
		intermediate-nodes,   // this domain uses intermediate pvariable nodes
		constrained-state     // this domain uses state constraints
	};

	types {
		reservoir: object;
	};

    pvariables {

		// Constants
        TOP_RES(reservoir): { non-fluent, real, default = 100.0 }; // Overflowing amount
        MAX_LEVEL(reservoir): { non-fluent, real, default = 80.0 };  // The upper bound for desired reservoir level
		MIN_LEVEL(reservoir): { non-fluent, real, default = 20.0 };  // The lower bound for desired reservoir level
		RAIN_VAR(reservoir):  { non-fluent, real, default = 5.0 };  // Half normal variance parameter for rainfall
        RELEASE_VALUE(reservoir): {non-fluent, real, default = 5 }; // 
        RAIN_VALUE(reservoir): {non-fluent, real, default = 2 };
        RES_CONNECT(reservoir, reservoir): { non-fluent, bool, default = false }; // Indicates 2nd reservoir is forward connected to 1st reservoir
        CONNECTED_TO_SEA(reservoir): {non-fluent, bool, default = false}; // reservoirs connected to the sea

        COST(reservoir) : { non-fluent, real, default =  -5.0 }; // Penalty per unit of level < MIN_LEVEL

        // Intermediate fluents
        // rain(reservoir):   {interm-fluent, real}; // Amount of rain fell
        // inflow(reservoir):     {interm-fluent, real}; // Amount received from backward reservoirs
        // individual_outflow(reservoir): {interm-fluent, real}; // Net amount of water released from reservoir to individually connected reservoirs
        // released_water(reservoir): {interm-fluent, real}; // Amount of released water

        // State fluents
        rlevel(reservoir): {state-fluent, real, default = 50.0 }; // Reservoir level
        // rain(reservoir): {state-fluent, real, default = 0.0 };

        // Action fluents
        release(reservoir): { action-fluent, bool, default = false }; // Action to set outflow of reservoir
        do_nothing(reservoir): { action-fluent, bool, default = false };
    };

    cpfs {
        // amount of ran fall for this timestep
        // rain(?r) =  abs[Normal(0, RAIN_VAR(?r))];
        // rain(?r) = rain(?r) + 1.0;

        // actual amount of water released by opening the release valve, based on the current water level
        // released_water(?r) = if (release(?r))
        //                     then - RELEASE_VALUE(?r)
        //                     else 0;

        // the fraction of outflow to each of the forward connected tanks
        // individual_outflow(?r) = released_water(?r)* 1 / ((sum_{?out: reservoir} [RES_CONNECT(?r,?out)]) + CONNECTED_TO_SEA(?r));

        // total incoming flow from all previous connected tanks
        // inflow(?r) = (sum_{?in : reservoir} [RES_CONNECT(?in,?r) * individual_outflow(?in)]);

        // the next state - the water level of the tank
        // rlevel'(?r) = min[TOP_RES(?r), max[0, rlevel(?r) + rain(?r) - released_water(?r)]];
        rlevel'(?r) = if (release(?r))
                    then min[TOP_RES(?r), max[0, rlevel(?r) + RAIN_VALUE(?r)]]
                    else if (do_nothing(?r))
                    then min[TOP_RES(?r), max[0, rlevel(?r) + RAIN_VALUE(?r) - RELEASE_VALUE(?r)]]
                    else rlevel(?r);
        //rlevel'(?r) = min[TOP_RES(?r), max[0, rlevel(?r) + rain(?r) -5 * release(?r)]];

    };

    reward = (sum_{?r: reservoir} [if ((rlevel(?r) >= MIN_LEVEL(?r)) ^ (rlevel(?r) <= MAX_LEVEL(?r)))
                                   then 1
                                   else if (rlevel(?r) >= 0.9 * TOP_RES(?r))
                                   then -1
                                   else 0
                                   ]) ;

	state-invariants {
		forall_{?r : reservoir} rlevel(?r) >= 0;
		forall_{?r : reservoir} rlevel(?r) <= TOP_RES(?r);
        (sum_{?r : reservoir} [CONNECTED_TO_SEA(?r)]) == 1;
	};

}